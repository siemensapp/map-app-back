{
  "_from": "cors",
  "_id": "cors@2.8.5",
  "_inBundle": false,
  "_integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
  "_location": "/cors",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cors",
    "fetchSpec": "latest",
    "name": "cors",
    "raw": "cors",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
  "_shasum": "eac11da51592dd86b9f06f6e7ac293b3df875d29",
  "_spec": "cors",
  "_where": "C:\\UserData\\Z0041MKM\\Documents\\map-app-back",
  "author": {
    "email": "troygoode@gmail.com",
    "name": "Troy Goode",
    "url": "https://github.com/troygoode/"
  },
  "bugs": {
    "url": "https://github.com/expressjs/cors/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "object-assign": "^4",
    "vary": "^1"
  },
  "deprecated": false,
  "description": "Node.js CORS middleware",
  "devDependencies": {
    "after": "0.8.2",
    "eslint": "2.13.1",
    "express": "4.16.3",
    "mocha": "5.2.0",
    "nyc": "13.1.0",
    "supertest": "3.3.0"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "CONTRIBUTING.md",
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "lib/index.js"
  ],
  "homepage": "https://github.com/expressjs/cors#readme",
  "keywords": [
    "connect",
    "cors",
    "express",
    "middleware"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "cors",
  "optionalDependencies": {},
  "readme": "# cors\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nCORS is a node.js package for providing a [Connect](http://www.senchalabs.org/connect/)/[Express](http://expressjs.com/) middleware that can be used to enable [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) with various options.\r\n\r\n**[Follow me (@troygoode) on Twitter!](https://twitter.com/intent/user?screen_name=troygoode)**\r\n\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n  * [Simple Usage](#simple-usage-enable-all-cors-requests)\r\n  * [Enable CORS for a Single Route](#enable-cors-for-a-single-route)\r\n  * [Configuring CORS](#configuring-cors)\r\n  * [Configuring CORS Asynchronously](#configuring-cors-asynchronously)\r\n  * [Enabling CORS Pre-Flight](#enabling-cors-pre-flight)\r\n* [Configuration Options](#configuration-options)\r\n* [Demo](#demo)\r\n* [License](#license)\r\n* [Author](#author)\r\n\r\n## Installation\r\n\r\nThis is a [Node.js](https://nodejs.org/en/) module available through the\r\n[npm registry](https://www.npmjs.com/). Installation is done using the\r\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\r\n\r\n```sh\r\n$ npm install cors\r\n```\r\n\r\n## Usage\r\n\r\n### Simple Usage (Enable *All* CORS Requests)\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\napp.use(cors())\r\n\r\napp.get('/products/:id', function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for all origins!'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\n### Enable CORS for a Single Route\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\napp.get('/products/:id', cors(), function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for a Single Route'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\n### Configuring CORS\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\nvar corsOptions = {\r\n  origin: 'http://example.com',\r\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\r\n}\r\n\r\napp.get('/products/:id', cors(corsOptions), function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for only example.com.'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\n### Configuring CORS w/ Dynamic Origin\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\nvar whitelist = ['http://example1.com', 'http://example2.com']\r\nvar corsOptions = {\r\n  origin: function (origin, callback) {\r\n    if (whitelist.indexOf(origin) !== -1) {\r\n      callback(null, true)\r\n    } else {\r\n      callback(new Error('Not allowed by CORS'))\r\n    }\r\n  }\r\n}\r\n\r\napp.get('/products/:id', cors(corsOptions), function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for a whitelisted domain.'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\nIf you do not want to block REST tools or server-to-server requests,\r\nadd a `!origin` check in the origin function like so:\r\n\r\n```javascript\r\nvar corsOptions = {\r\n  origin: function (origin, callback) {\r\n    if (whitelist.indexOf(origin) !== -1 || !origin) {\r\n      callback(null, true)\r\n    } else {\r\n      callback(new Error('Not allowed by CORS'))\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Enabling CORS Pre-Flight\r\n\r\nCertain CORS requests are considered 'complex' and require an initial\r\n`OPTIONS` request (called the \"pre-flight request\"). An example of a\r\n'complex' CORS request is one that uses an HTTP verb other than\r\nGET/HEAD/POST (such as DELETE) or that uses custom headers. To enable\r\npre-flighting, you must add a new OPTIONS handler for the route you want\r\nto support:\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\napp.options('/products/:id', cors()) // enable pre-flight request for DELETE request\r\napp.del('/products/:id', cors(), function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for all origins!'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\nYou can also enable pre-flight across-the-board like so:\r\n\r\n```javascript\r\napp.options('*', cors()) // include before other routes\r\n```\r\n\r\n### Configuring CORS Asynchronously\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\n\r\nvar whitelist = ['http://example1.com', 'http://example2.com']\r\nvar corsOptionsDelegate = function (req, callback) {\r\n  var corsOptions;\r\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\r\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\r\n  } else {\r\n    corsOptions = { origin: false } // disable CORS for this request\r\n  }\r\n  callback(null, corsOptions) // callback expects two parameters: error and options\r\n}\r\n\r\napp.get('/products/:id', cors(corsOptionsDelegate), function (req, res, next) {\r\n  res.json({msg: 'This is CORS-enabled for a whitelisted domain.'})\r\n})\r\n\r\napp.listen(80, function () {\r\n  console.log('CORS-enabled web server listening on port 80')\r\n})\r\n```\r\n\r\n## Configuration Options\r\n\r\n* `origin`: Configures the **Access-Control-Allow-Origin** CORS header. Possible values:\r\n  - `Boolean` - set `origin` to `true` to reflect the [request origin](http://tools.ietf.org/html/draft-abarth-origin-09), as defined by `req.header('Origin')`, or set it to `false` to disable CORS.\r\n  - `String` - set `origin` to a specific origin. For example if you set it to `\"http://example.com\"` only requests from \"http://example.com\" will be allowed.\r\n  - `RegExp` - set `origin` to a regular expression pattern which will be used to test the request origin. If it's a match, the request origin will be reflected. For example the pattern `/example\\.com$/` will reflect any request that is coming from an origin ending with \"example.com\".\r\n  - `Array` - set `origin` to an array of valid origins. Each origin can be a `String` or a `RegExp`. For example `[\"http://example1.com\", /\\.example2\\.com$/]` will accept any request from \"http://example1.com\" or from a subdomain of \"example2.com\".\r\n  - `Function` - set `origin` to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature `err [object], allow [bool]`) as the second.\r\n* `methods`: Configures the **Access-Control-Allow-Methods** CORS header. Expects a comma-delimited string (ex: 'GET,PUT,POST') or an array (ex: `['GET', 'PUT', 'POST']`).\r\n* `allowedHeaders`: Configures the **Access-Control-Allow-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Type,Authorization') or an array (ex: `['Content-Type', 'Authorization']`). If not specified, defaults to reflecting the headers specified in the request's **Access-Control-Request-Headers** header.\r\n* `exposedHeaders`: Configures the **Access-Control-Expose-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Range,X-Content-Range') or an array (ex: `['Content-Range', 'X-Content-Range']`). If not specified, no custom headers are exposed.\r\n* `credentials`: Configures the **Access-Control-Allow-Credentials** CORS header. Set to `true` to pass the header, otherwise it is omitted.\r\n* `maxAge`: Configures the **Access-Control-Max-Age** CORS header. Set to an integer to pass the header, otherwise it is omitted.\r\n* `preflightContinue`: Pass the CORS preflight response to the next handler.\r\n* `optionsSuccessStatus`: Provides a status code to use for successful `OPTIONS` requests, since some legacy browsers (IE11, various SmartTVs) choke on `204`.\r\n\r\nThe default configuration is the equivalent of:\r\n\r\n```json\r\n{\r\n  \"origin\": \"*\",\r\n  \"methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",\r\n  \"preflightContinue\": false,\r\n  \"optionsSuccessStatus\": 204\r\n}\r\n```\r\n\r\nFor details on the effect of each CORS header, read [this](http://www.html5rocks.com/en/tutorials/cors/) article on HTML5 Rocks.\r\n\r\n## Demo\r\n\r\nA demo that illustrates CORS working (and not working) using jQuery is available here: [http://node-cors-client.herokuapp.com/](http://node-cors-client.herokuapp.com/)\r\n\r\nCode for that demo can be found here:\r\n\r\n* Client: [https://github.com/TroyGoode/node-cors-client](https://github.com/TroyGoode/node-cors-client)\r\n* Server: [https://github.com/TroyGoode/node-cors-server](https://github.com/TroyGoode/node-cors-server)\r\n\r\n## License\r\n\r\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\r\n\r\n## Author\r\n\r\n[Troy Goode](https://github.com/TroyGoode) ([troygoode@gmail.com](mailto:troygoode@gmail.com))\r\n\r\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cors/master.svg\r\n[coveralls-url]: https://coveralls.io/r/expressjs/cors?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/cors.svg\r\n[downloads-url]: https://npmjs.org/package/cors\r\n[npm-image]: https://img.shields.io/npm/v/cors.svg\r\n[npm-url]: https://npmjs.org/package/cors\r\n[travis-image]: https://img.shields.io/travis/expressjs/cors/master.svg\r\n[travis-url]: https://travis-ci.org/expressjs/cors\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/cors.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "test": "npm run lint && nyc --reporter=html --reporter=text mocha --require test/support/env"
  },
  "version": "2.8.5"
}
