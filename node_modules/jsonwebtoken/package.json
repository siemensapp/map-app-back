{
  "_from": "jsonwebtoken",
  "_id": "jsonwebtoken@8.5.1",
  "_inBundle": false,
  "_integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
  "_location": "/jsonwebtoken",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jsonwebtoken",
    "fetchSpec": "latest",
    "name": "jsonwebtoken",
    "raw": "jsonwebtoken",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
  "_shasum": "00e71e0b8df54c2121a1f26137df2280673bcc0d",
  "_spec": "jsonwebtoken",
  "_where": "C:\\UserData\\Z0041MKM\\Documents\\map-app-back",
  "author": {
    "name": "auth0"
  },
  "bugs": {
    "url": "https://github.com/auth0/node-jsonwebtoken/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jws": "^3.2.2",
    "lodash.includes": "^4.3.0",
    "lodash.isboolean": "^3.0.3",
    "lodash.isinteger": "^4.0.4",
    "lodash.isnumber": "^3.0.3",
    "lodash.isplainobject": "^4.0.6",
    "lodash.isstring": "^4.0.1",
    "lodash.once": "^4.0.0",
    "ms": "^2.1.1",
    "semver": "^5.6.0"
  },
  "deprecated": false,
  "description": "JSON Web Token implementation (symmetric and asymmetric)",
  "devDependencies": {
    "atob": "^2.1.2",
    "chai": "^4.1.2",
    "conventional-changelog": "~1.1.0",
    "cost-of-modules": "^1.0.1",
    "eslint": "^4.19.1",
    "mocha": "^5.2.0",
    "nsp": "^2.6.2",
    "nyc": "^11.9.0",
    "sinon": "^6.0.0"
  },
  "engines": {
    "node": ">=4",
    "npm": ">=1.4.28"
  },
  "files": [
    "decode.js",
    "lib",
    "sign.js",
    "verify.js"
  ],
  "homepage": "https://github.com/auth0/node-jsonwebtoken#readme",
  "keywords": [
    "jwt"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "jsonwebtoken",
  "nyc": {
    "branches": 95,
    "check-coverage": true,
    "exclude": [
      "./test/**"
    ],
    "functions": 100,
    "lines": 95,
    "reporter": [
      "json",
      "lcov",
      "text-summary"
    ],
    "statements": 95
  },
  "optionalDependencies": {},
  "readme": "# jsonwebtoken\r\n\r\n| **Build** | **Dependency** |\r\n|-----------|---------------|\r\n| [![Build Status](https://secure.travis-ci.org/auth0/node-jsonwebtoken.svg?branch=master)](http://travis-ci.org/auth0/node-jsonwebtoken) | [![Dependency Status](https://david-dm.org/auth0/node-jsonwebtoken.svg)](https://david-dm.org/auth0/node-jsonwebtoken) |\r\n\r\n\r\nAn implementation of [JSON Web Tokens](https://tools.ietf.org/html/rfc7519).\r\n\r\nThis was developed against `draft-ietf-oauth-json-web-token-08`. It makes use of [node-jws](https://github.com/brianloveswords/node-jws)\r\n\r\n# Install\r\n\r\n```bash\r\n$ npm install jsonwebtoken\r\n```\r\n\r\n# Migration notes\r\n\r\n* [From v7 to v8](https://github.com/auth0/node-jsonwebtoken/wiki/Migration-Notes:-v7-to-v8)\r\n\r\n# Usage\r\n\r\n### jwt.sign(payload, secretOrPrivateKey, [options, callback])\r\n\r\n(Asynchronous) If a callback is supplied, the callback is called with the `err` or the JWT.\r\n\r\n(Synchronous) Returns the JsonWebToken as string\r\n\r\n`payload` could be an object literal, buffer or string representing valid JSON. \r\n> **Please _note_ that** `exp` or any other claim is only set if the payload is an object literal. Buffer or string payloads are not checked for JSON validity.\r\n\r\n> If `payload` is not a buffer or a string, it will be coerced into a string using `JSON.stringify`.\r\n\r\n`secretOrPrivateKey` is a string, buffer, or object containing either the secret for HMAC algorithms or the PEM\r\nencoded private key for RSA and ECDSA. In case of a private key with passphrase an object `{ key, passphrase }` can be used (based on [crypto documentation](https://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format)), in this case be sure you pass the `algorithm` option.\r\n\r\n`options`:\r\n\r\n* `algorithm` (default: `HS256`)\r\n* `expiresIn`: expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms). \r\n  > Eg: `60`, `\"2 days\"`, `\"10h\"`, `\"7d\"`. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (`\"120\"` is equal to `\"120ms\"`).\r\n* `notBefore`: expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms). \r\n  > Eg: `60`, `\"2 days\"`, `\"10h\"`, `\"7d\"`. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (`\"120\"` is equal to `\"120ms\"`).\r\n* `audience`\r\n* `issuer`\r\n* `jwtid`\r\n* `subject`\r\n* `noTimestamp`\r\n* `header`\r\n* `keyid`\r\n* `mutatePayload`: if true, the sign function will modify the payload object directly. This is useful if you need a raw reference to the payload after claims have been applied to it but before it has been encoded into a token.\r\n\r\n\r\n\r\n> There are no default values for `expiresIn`, `notBefore`, `audience`, `subject`, `issuer`.  These claims can also be provided in the payload directly with `exp`, `nbf`, `aud`, `sub` and `iss` respectively, but you **_can't_** include in both places.\r\n\r\nRemember that `exp`, `nbf` and `iat` are **NumericDate**, see related [Token Expiration (exp claim)](#token-expiration-exp-claim)\r\n\r\n\r\nThe header can be customized via the `options.header` object.\r\n\r\nGenerated jwts will include an `iat` (issued at) claim by default unless `noTimestamp` is specified. If `iat` is inserted in the payload, it will be used instead of the real timestamp for calculating other things like `exp` given a timespan in `options.expiresIn`.\r\n\r\nSynchronous Sign with default (HMAC SHA256)\r\n\r\n```js\r\nvar jwt = require('jsonwebtoken');\r\nvar token = jwt.sign({ foo: 'bar' }, 'shhhhh');\r\n```\r\n\r\nSynchronous Sign with RSA SHA256\r\n```js\r\n// sign with RSA SHA256\r\nvar privateKey = fs.readFileSync('private.key');\r\nvar token = jwt.sign({ foo: 'bar' }, privateKey, { algorithm: 'RS256'});\r\n```\r\n\r\nSign asynchronously\r\n```js\r\njwt.sign({ foo: 'bar' }, privateKey, { algorithm: 'RS256' }, function(err, token) {\r\n  console.log(token);\r\n});\r\n```\r\n\r\nBackdate a jwt 30 seconds\r\n```js\r\nvar older_token = jwt.sign({ foo: 'bar', iat: Math.floor(Date.now() / 1000) - 30 }, 'shhhhh');\r\n```\r\n\r\n#### Token Expiration (exp claim)\r\n\r\nThe standard for JWT defines an `exp` claim for expiration. The expiration is represented as a **NumericDate**:\r\n\r\n> A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition \"Seconds Since the Epoch\", in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented.  See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.\r\n\r\nThis means that the `exp` field should contain the number of seconds since the epoch.\r\n\r\nSigning a token with 1 hour of expiration:\r\n\r\n```javascript\r\njwt.sign({\r\n  exp: Math.floor(Date.now() / 1000) + (60 * 60),\r\n  data: 'foobar'\r\n}, 'secret');\r\n```\r\n\r\nAnother way to generate a token like this with this library is:\r\n\r\n```javascript\r\njwt.sign({\r\n  data: 'foobar'\r\n}, 'secret', { expiresIn: 60 * 60 });\r\n\r\n//or even better:\r\n\r\njwt.sign({\r\n  data: 'foobar'\r\n}, 'secret', { expiresIn: '1h' });\r\n```\r\n\r\n### jwt.verify(token, secretOrPublicKey, [options, callback])\r\n\r\n(Asynchronous) If a callback is supplied, function acts asynchronously. The callback is called with the decoded payload if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will be called with the error.\r\n\r\n(Synchronous) If a callback is not supplied, function acts synchronously. Returns the payload decoded if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will throw the error.\r\n\r\n`token` is the JsonWebToken string\r\n\r\n`secretOrPublicKey` is a string or buffer containing either the secret for HMAC algorithms, or the PEM\r\nencoded public key for RSA and ECDSA.\r\nIf `jwt.verify` is called asynchronous, `secretOrPublicKey` can be a function that should fetch the secret or public key. See below for a detailed example\r\n\r\nAs mentioned in [this comment](https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138), there are other libraries that expect base64 encoded secrets (random bytes encoded using base64), if that is your case you can pass `Buffer.from(secret, 'base64')`, by doing this the secret will be decoded using base64 and the token verification will use the original random bytes.\r\n\r\n`options`\r\n\r\n* `algorithms`: List of strings with the names of the allowed algorithms. For instance, `[\"HS256\", \"HS384\"]`.\r\n* `audience`: if you want to check audience (`aud`), provide a value here. The audience can be checked against a string, a regular expression or a list of strings and/or regular expressions. \r\n  > Eg: `\"urn:foo\"`, `/urn:f[o]{2}/`, `[/urn:f[o]{2}/, \"urn:bar\"]`\r\n* `complete`: return an object with the decoded `{ payload, header, signature }` instead of only the usual content of the payload.\r\n* `issuer` (optional): string or array of strings of valid values for the `iss` field.\r\n* `ignoreExpiration`: if `true` do not validate the expiration of the token.\r\n* `ignoreNotBefore`...\r\n* `subject`: if you want to check subject (`sub`), provide a value here\r\n* `clockTolerance`: number of seconds to tolerate when checking the `nbf` and `exp` claims, to deal with small clock differences among different servers\r\n* `maxAge`: the maximum allowed age for tokens to still be valid. It is expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms). \r\n  > Eg: `1000`, `\"2 days\"`, `\"10h\"`, `\"7d\"`. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (`\"120\"` is equal to `\"120ms\"`).\r\n* `clockTimestamp`: the time in seconds that should be used as the current time for all necessary comparisons.\r\n* `nonce`: if you want to check `nonce` claim, provide a string value here. It is used on Open ID for the ID Tokens. ([Open ID implementation notes](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes))\r\n\r\n\r\n```js\r\n// verify a token symmetric - synchronous\r\nvar decoded = jwt.verify(token, 'shhhhh');\r\nconsole.log(decoded.foo) // bar\r\n\r\n// verify a token symmetric\r\njwt.verify(token, 'shhhhh', function(err, decoded) {\r\n  console.log(decoded.foo) // bar\r\n});\r\n\r\n// invalid token - synchronous\r\ntry {\r\n  var decoded = jwt.verify(token, 'wrong-secret');\r\n} catch(err) {\r\n  // err\r\n}\r\n\r\n// invalid token\r\njwt.verify(token, 'wrong-secret', function(err, decoded) {\r\n  // err\r\n  // decoded undefined\r\n});\r\n\r\n// verify a token asymmetric\r\nvar cert = fs.readFileSync('public.pem');  // get public key\r\njwt.verify(token, cert, function(err, decoded) {\r\n  console.log(decoded.foo) // bar\r\n});\r\n\r\n// verify audience\r\nvar cert = fs.readFileSync('public.pem');  // get public key\r\njwt.verify(token, cert, { audience: 'urn:foo' }, function(err, decoded) {\r\n  // if audience mismatch, err == invalid audience\r\n});\r\n\r\n// verify issuer\r\nvar cert = fs.readFileSync('public.pem');  // get public key\r\njwt.verify(token, cert, { audience: 'urn:foo', issuer: 'urn:issuer' }, function(err, decoded) {\r\n  // if issuer mismatch, err == invalid issuer\r\n});\r\n\r\n// verify jwt id\r\nvar cert = fs.readFileSync('public.pem');  // get public key\r\njwt.verify(token, cert, { audience: 'urn:foo', issuer: 'urn:issuer', jwtid: 'jwtid' }, function(err, decoded) {\r\n  // if jwt id mismatch, err == invalid jwt id\r\n});\r\n\r\n// verify subject\r\nvar cert = fs.readFileSync('public.pem');  // get public key\r\njwt.verify(token, cert, { audience: 'urn:foo', issuer: 'urn:issuer', jwtid: 'jwtid', subject: 'subject' }, function(err, decoded) {\r\n  // if subject mismatch, err == invalid subject\r\n});\r\n\r\n// alg mismatch\r\nvar cert = fs.readFileSync('public.pem'); // get public key\r\njwt.verify(token, cert, { algorithms: ['RS256'] }, function (err, payload) {\r\n  // if token alg != RS256,  err == invalid signature\r\n});\r\n\r\n// Verify using getKey callback\r\n// Example uses https://github.com/auth0/node-jwks-rsa as a way to fetch the keys.\r\nvar jwksClient = require('jwks-rsa');\r\nvar client = jwksClient({\r\n  jwksUri: 'https://sandrino.auth0.com/.well-known/jwks.json'\r\n});\r\nfunction getKey(header, callback){\r\n  client.getSigningKey(header.kid, function(err, key) {\r\n    var signingKey = key.publicKey || key.rsaPublicKey;\r\n    callback(null, signingKey);\r\n  });\r\n}\r\n\r\njwt.verify(token, getKey, options, function(err, decoded) {\r\n  console.log(decoded.foo) // bar\r\n});\r\n\r\n```\r\n\r\n### jwt.decode(token [, options])\r\n\r\n(Synchronous) Returns the decoded payload without verifying if the signature is valid.\r\n\r\n> __Warning:__ This will __not__ verify whether the signature is valid. You should __not__ use this for untrusted messages. You most likely want to use `jwt.verify` instead.\r\n\r\n`token` is the JsonWebToken string\r\n\r\n`options`:\r\n\r\n* `json`: force JSON.parse on the payload even if the header doesn't contain `\"typ\":\"JWT\"`.\r\n* `complete`: return an object with the decoded payload and header.\r\n\r\nExample\r\n\r\n```js\r\n// get the decoded payload ignoring signature, no secretOrPrivateKey needed\r\nvar decoded = jwt.decode(token);\r\n\r\n// get the decoded payload and header\r\nvar decoded = jwt.decode(token, {complete: true});\r\nconsole.log(decoded.header);\r\nconsole.log(decoded.payload)\r\n```\r\n\r\n## Errors & Codes\r\nPossible thrown errors during verification.\r\nError is the first argument of the verification callback.\r\n\r\n### TokenExpiredError\r\n\r\nThrown error if the token is expired.\r\n\r\nError object:\r\n\r\n* name: 'TokenExpiredError'\r\n* message: 'jwt expired'\r\n* expiredAt: [ExpDate]\r\n\r\n```js\r\njwt.verify(token, 'shhhhh', function(err, decoded) {\r\n  if (err) {\r\n    /*\r\n      err = {\r\n        name: 'TokenExpiredError',\r\n        message: 'jwt expired',\r\n        expiredAt: 1408621000\r\n      }\r\n    */\r\n  }\r\n});\r\n```\r\n\r\n### JsonWebTokenError\r\nError object:\r\n\r\n* name: 'JsonWebTokenError'\r\n* message:\r\n  * 'jwt malformed'\r\n  * 'jwt signature is required'\r\n  * 'invalid signature'\r\n  * 'jwt audience invalid. expected: [OPTIONS AUDIENCE]'\r\n  * 'jwt issuer invalid. expected: [OPTIONS ISSUER]'\r\n  * 'jwt id invalid. expected: [OPTIONS JWT ID]'\r\n  * 'jwt subject invalid. expected: [OPTIONS SUBJECT]'\r\n\r\n```js\r\njwt.verify(token, 'shhhhh', function(err, decoded) {\r\n  if (err) {\r\n    /*\r\n      err = {\r\n        name: 'JsonWebTokenError',\r\n        message: 'jwt malformed'\r\n      }\r\n    */\r\n  }\r\n});\r\n```\r\n\r\n### NotBeforeError\r\nThrown if current time is before the nbf claim.\r\n\r\nError object:\r\n\r\n* name: 'NotBeforeError'\r\n* message: 'jwt not active'\r\n* date: 2018-10-04T16:10:44.000Z\r\n\r\n```js\r\njwt.verify(token, 'shhhhh', function(err, decoded) {\r\n  if (err) {\r\n    /*\r\n      err = {\r\n        name: 'NotBeforeError',\r\n        message: 'jwt not active',\r\n        date: 2018-10-04T16:10:44.000Z\r\n      }\r\n    */\r\n  }\r\n});\r\n```\r\n\r\n\r\n## Algorithms supported\r\n\r\nArray of supported algorithms. The following algorithms are currently supported.\r\n\r\nalg Parameter Value | Digital Signature or MAC Algorithm\r\n----------------|----------------------------\r\nHS256 | HMAC using SHA-256 hash algorithm\r\nHS384 | HMAC using SHA-384 hash algorithm\r\nHS512 | HMAC using SHA-512 hash algorithm\r\nRS256 | RSASSA-PKCS1-v1_5 using SHA-256 hash algorithm\r\nRS384 | RSASSA-PKCS1-v1_5 using SHA-384 hash algorithm\r\nRS512 | RSASSA-PKCS1-v1_5 using SHA-512 hash algorithm\r\nPS256 | RSASSA-PSS using SHA-256 hash algorithm (only node ^6.12.0 OR >=8.0.0)\r\nPS384 | RSASSA-PSS using SHA-384 hash algorithm (only node ^6.12.0 OR >=8.0.0)\r\nPS512 | RSASSA-PSS using SHA-512 hash algorithm (only node ^6.12.0 OR >=8.0.0)\r\nES256 | ECDSA using P-256 curve and SHA-256 hash algorithm\r\nES384 | ECDSA using P-384 curve and SHA-384 hash algorithm\r\nES512 | ECDSA using P-521 curve and SHA-512 hash algorithm\r\nnone | No digital signature or MAC value included\r\n\r\n## Refreshing JWTs\r\n\r\nFirst of all, we recommend you to think carefully if auto-refreshing a JWT will not introduce any vulnerability in your system.\r\n\r\nWe are not comfortable including this as part of the library, however, you can take a look at [this example](https://gist.github.com/ziluvatar/a3feb505c4c0ec37059054537b38fc48) to show how this could be accomplished.\r\nApart from that example there are [an issue](https://github.com/auth0/node-jsonwebtoken/issues/122) and [a pull request](https://github.com/auth0/node-jsonwebtoken/pull/172) to get more knowledge about this topic.\r\n\r\n# TODO\r\n\r\n* X.509 certificate chain is not checked\r\n\r\n## Issue Reporting\r\n\r\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\r\n\r\n## Author\r\n\r\n[Auth0](https://auth0.com)\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/auth0/node-jsonwebtoken.git"
  },
  "scripts": {
    "coverage": "nyc mocha --use_strict",
    "lint": "eslint .",
    "test": "npm run lint && npm run coverage && cost-of-modules"
  },
  "version": "8.5.1"
}
